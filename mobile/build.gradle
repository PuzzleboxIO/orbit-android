apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
//        applicationId "info.puzzlebox.orbit"
//        applicationId "io.puzzlebox.orbit"
//        minSdkVersion 15 // API 4.0.3
//        minSdkVersion 16 // API 4.1 [Manifest.permission.READ_EXTERNAL_STORAGE]
//        minSdkVersion 18 // API 4.3 [Emotiv Community SDK]
        minSdkVersion 21 // 5.x - required for ScanResult.getDevice()
        targetSdkVersion 27
        versionCode 22
        versionName "2.3.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
//        debug {
//            debuggable true
//        }
//        staging {
//            // Specifies a sorted list of fallback build types that the
//            // plugin should try to use when a dependency does not include a
//            // "staging" build type. You may specify as many fallbacks as you
//            // like, and the plugin selects the first build type that's
//            // available in the dependency.
//            matchingFallbacks = ['debug', 'qa', 'release']
//        }
//        releaseApp {}
//        releaseSdk {}
    }
    dexOptions {
        javaMaxHeapSize "2g"
    }

    // Disable SerialDevice because not currently used to talk to Puzzlebox Pyramid but we want to keep the source code
    sourceSets {
        main {
            java {
                exclude '**/SerialDevice.java'
            }
        }
        androidTest {
            java {
                exclude '**/SerialDevice.java'
            }
        }
    }

    useLibrary 'org.apache.http.legacy' // deprecated in Android 6.0

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':jigsaw')
//    wearApp project(':wear')

    // Android Support Libraries
//    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '27.1.1'
            }
        }
    }
}
